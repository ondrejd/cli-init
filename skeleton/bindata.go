package skeleton

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _resource_tmpl_common_changelog_md_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x56\x56\xa8\xae\x56\xd0\x0b\x4b\x2d\x2a\xce\xcc\xcf\x53\xa8\xad\x55\xd0\x00\xf2\x53\x12\x4b\x52\x81\x6c\x4d\x2e\x2e\xcf\xbc\xcc\x92\xcc\xc4\x1c\x85\xa2\xd4\x9c\xd4\xc4\xe2\x54\x2e\x2e\x65\xa0\x0e\xc7\x94\x94\xd4\x14\x2e\x2e\x5d\x10\x43\xc1\xad\x34\x2f\x25\x31\x37\x35\xaf\x04\xa8\x2a\x2d\x35\xb1\xa4\xb4\x28\xb5\x18\xa2\xcc\x25\xb5\xa0\x28\x35\x19\x68\x14\x58\xad\x5f\x7e\x49\x46\x66\x5e\x3a\x44\x2a\x28\x35\x37\xbf\x0c\x8b\xb8\x5b\x66\x05\xaa\x28\x20\x00\x00\xff\xff\xf6\x0c\x35\xa7\xa0\x00\x00\x00")

func resource_tmpl_common_changelog_md_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_common_changelog_md_tmpl,
		"resource/tmpl/common/CHANGELOG.md.tmpl",
	)
}

func resource_tmpl_common_changelog_md_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_common_changelog_md_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/common/CHANGELOG.md.tmpl", size: 160, mode: os.FileMode(420), modTime: time.Unix(1430466720, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_common_readme_md_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x50\x4d\x6b\xe3\x30\x10\xbd\xeb\x57\x0c\x64\x0f\x09\xec\xda\xec\x35\xb7\x25\x4b\xa1\x97\xb6\x84\xf6\x14\x0a\x1a\x3b\x63\x4b\xd4\x92\x52\x69\x44\x28\x21\xff\xbd\x23\xb9\xa5\xe9\xa9\xed\xc1\x58\x7a\xa3\xf7\x31\x6f\x01\xa7\x13\x34\x37\xe8\x08\xce\x67\xa5\xca\xe5\x3f\xa5\x3e\xda\x03\xdb\xe0\x2b\xb6\x58\xc0\x05\x54\xef\x0f\x09\x47\xaa\xa7\x6b\x9f\x18\xa7\x49\xa9\xfb\x00\x76\x3e\xff\x86\x9c\x08\xf4\x18\x60\x24\xd6\x6b\xa5\xb4\xd6\x1d\x26\xa3\x7e\xc1\x8c\xc1\x9f\x3d\x8c\x96\x4d\xee\x9a\x3e\xb8\xb6\x78\xde\x1e\x3d\x45\x71\x6b\x2f\xd3\x08\xaf\x7a\x6c\x82\xe7\x68\xbb\x3c\xdb\xff\x6d\xe0\x2a\xc4\x27\x58\xee\x0c\xf3\x21\xad\xdb\xf6\x1b\x5a\xed\x20\x94\xc7\xe5\x4f\x19\xab\x55\xb1\xdb\x44\x42\x26\x40\x18\xe4\x9f\x23\x41\x17\xd1\xf7\xa6\x8e\x82\x73\x96\xe1\x25\xe4\x08\xbd\x41\x3f\x52\x2a\xf0\x96\x64\x61\x9a\xe1\x29\xf4\x38\xbd\x0f\x01\x47\x2c\x35\x01\x1b\x02\x87\x89\xc5\xf7\x43\x6d\x9b\x3d\x30\xc9\x34\x65\x2b\x86\x47\x49\x59\x1f\x96\x2e\x2b\xde\xb4\x4d\xd3\x68\x90\xdc\x0e\xfd\x1e\xca\xd7\x07\x3f\xd8\xe8\xe4\x1d\x32\x48\x94\x03\xa6\xf4\x16\x42\xd4\x84\x39\x38\x29\x3c\xe9\x4f\x8b\x78\x3a\xc2\x5d\x9e\x26\x09\xfa\x9c\x45\xb8\xd6\xfc\x2f\xb3\x09\x51\xa9\xdd\x65\x25\x5f\x76\xb6\x52\xaf\x01\x00\x00\xff\xff\xb5\x89\x6c\xef\x43\x02\x00\x00")

func resource_tmpl_common_readme_md_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_common_readme_md_tmpl,
		"resource/tmpl/common/README.md.tmpl",
	)
}

func resource_tmpl_common_readme_md_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_common_readme_md_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/common/README.md.tmpl", size: 579, mode: os.FileMode(420), modTime: time.Unix(1430468872, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_common_version_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\xce\xcf\x2b\x2e\x51\xf0\x4b\xcc\x4d\x55\x28\x2e\x29\xca\xcc\x4b\x57\xb0\x55\x50\xaa\xae\x56\xd0\x03\x0b\xd5\xd6\x2a\x41\x55\x84\xa5\x16\x15\x67\xe6\xe7\xa1\x29\x82\x89\x82\xd4\x01\x02\x00\x00\xff\xff\x61\x03\x18\x7c\x58\x00\x00\x00")

func resource_tmpl_common_version_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_common_version_go_tmpl,
		"resource/tmpl/common/version.go.tmpl",
	)
}

func resource_tmpl_common_version_go_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_common_version_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/common/version.go.tmpl", size: 88, mode: os.FileMode(420), modTime: time.Unix(1430469109, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_flag_cli_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\x41\x4f\xdc\x3c\x10\x3d\xc7\xbf\x62\xbe\x48\x48\x09\xdf\xca\x94\x2b\x15\x97\x52\x90\x2a\x10\xa0\x6e\xd5\x1e\x28\xaa\xdc\x30\x09\x2e\x89\x9d\xda\x93\xdd\x56\x51\xfe\x7b\x67\x9c\xcd\x42\x55\xf6\x12\x7b\xfc\xe6\xbd\x99\x37\xb3\xbd\xa9\x9e\x4c\x83\xd0\x19\xeb\x94\xb2\x5d\xef\x03\x41\xa1\xb2\xbc\xee\x28\xe7\x8f\xf5\xb9\x02\xfe\xe5\x75\x6b\x9a\x5c\x95\x4a\x1d\x1d\xc1\xf9\x2f\x4b\x50\xf9\x07\x8c\x60\x02\x82\x75\x04\x1b\xd3\x0e\x7c\xa5\x47\x43\x10\xb0\x0f\x18\x91\xa3\xc6\x01\x2e\x58\xa8\x7d\x00\x03\xbd\x09\x64\xab\xa1\x35\x01\x30\x04\x1f\xb4\xaa\xbc\x8b\x49\x53\x68\xcf\x18\x79\x73\x29\x8a\xc2\x7a\x0a\x6f\x9e\xc3\xe7\x02\xdf\x85\x8f\xe1\x7f\xb0\x9e\xcc\xae\xa0\xb3\xab\x0f\x60\x45\x1d\x59\xaa\xeb\x8c\x7b\x80\xd6\x3a\x04\xff\xfd\x07\x56\xa4\xe8\x77\x8f\x09\x13\x29\x0c\x15\xc1\xa8\x32\x4e\xf2\x03\xad\x29\xa0\xe9\x40\xf0\x5c\xcc\x72\xe3\x96\x84\x29\xd2\x03\x43\xd2\x23\x1f\xf9\x3d\x65\x91\x87\x6d\xb0\xc4\x8e\x61\x8c\xe2\x5c\x1d\x7c\x97\xf0\x2c\xa0\x55\xb6\x67\x5d\xbd\xa0\xb4\x5e\x7f\x91\xa4\xa0\xa6\x54\xef\xc7\xc1\x71\x23\x1b\xff\x84\x71\x49\x85\xad\xa5\xc7\x74\x69\xec\x06\x1d\x57\xd1\x0c\x1d\x7b\x18\xb5\xaa\x07\x57\x41\x51\xb5\x16\x0e\x19\x58\x4a\x76\xc1\xcf\x11\xee\xee\xb9\x21\xeb\x9a\x32\xb9\x32\xaa\x54\xe0\x7b\xac\x53\xeb\x3d\x59\xef\x40\xc6\x26\x9e\x47\x54\x99\x9c\x23\x9c\x9c\xa6\xa0\xbe\xc6\xed\x05\x7f\xd7\x48\xc5\xb5\xe9\x70\x35\x47\xcf\xbc\x23\xeb\x06\xbc\x71\xc9\xee\x52\x65\xe3\x08\xc1\x38\x6e\x54\x5f\xa4\xfc\x69\x12\x26\x8e\x6a\x49\xe3\xeb\xc2\x18\xf5\x38\xea\x4f\x6c\xf5\x3a\x15\x35\x4d\x45\xce\x81\x2b\xef\x1a\x01\x4e\x53\xbe\x02\xc9\xe2\xfa\xcc\xd0\x12\x27\xae\x20\x9f\x03\xb1\x0a\x76\x2e\x97\x51\xb3\x24\xb2\xeb\xb3\xd2\x67\x0c\x51\x9e\xf6\x2a\xef\xbc\x6f\x8b\x7c\x33\x87\x99\xb4\x36\x6d\xe4\xf2\xf3\xdb\x90\x16\x71\x07\xb7\x8e\xf7\xad\x33\x89\x55\x46\xf8\x73\xb0\xa4\x99\x3c\x79\x74\x2b\x86\x2c\xab\x92\x36\x45\xa8\x55\x66\x6b\x19\xda\xb3\x54\xc2\x25\xaf\xef\x8e\x4f\xee\xcb\xb7\xe9\xf5\xbf\x53\x70\xb6\x95\x25\xca\x02\xd2\x10\x1c\xfc\xb5\xa1\x2a\x9b\x66\x91\xf5\xa3\xdf\x2e\xe5\x24\xea\xc3\xe7\x66\x24\x99\xff\x61\xfa\xa2\x97\xa2\x6b\x19\xae\xde\xaf\x0b\xf7\x72\x10\xf7\x8d\x1c\xc4\xaf\xd2\xe5\x3c\xa3\x5d\x7e\xf9\xaf\xf6\xcd\xe5\x2c\xfc\xda\xb8\xbe\x81\x34\xf4\x62\x64\x2f\x2d\x56\xaf\x30\x4d\xea\x4f\x00\x00\x00\xff\xff\x68\x03\x89\x65\x18\x04\x00\x00")

func resource_tmpl_flag_cli_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_flag_cli_go_tmpl,
		"resource/tmpl/flag/cli.go.tmpl",
	)
}

func resource_tmpl_flag_cli_go_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_flag_cli_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/flag/cli.go.tmpl", size: 1048, mode: os.FileMode(420), modTime: time.Unix(1430835483, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_flag_main_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\xca\x2f\x56\xe2\xe2\x4a\x2b\xcd\x4b\x06\x8b\x6b\x68\x2a\x54\x73\x71\x26\xe7\x64\x2a\x58\xd9\x2a\xa8\x39\xfb\x78\x56\xe7\x97\x96\x04\x97\x14\xa5\x26\xe6\x5a\x29\xe4\x17\xeb\x05\x97\xa4\x00\x05\x74\x14\x52\x8b\x8a\x50\x45\x81\x02\xb5\x5c\x9c\x40\xb6\x6b\x45\x66\x89\x06\xd0\x00\xbd\xa0\xd2\x3c\x0d\x20\xdf\xb1\x28\xbd\x58\x53\x93\xab\x96\x0b\x10\x00\x00\xff\xff\xfc\x39\x7e\x56\x7f\x00\x00\x00")

func resource_tmpl_flag_main_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_flag_main_go_tmpl,
		"resource/tmpl/flag/main.go.tmpl",
	)
}

func resource_tmpl_flag_main_go_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_flag_main_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/flag/main.go.tmpl", size: 127, mode: os.FileMode(420), modTime: time.Unix(1430835360, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_tcnksm_mflag_cli_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x53\x4d\x6f\xdb\x30\x0c\x3d\x47\xbf\x82\x33\x50\x20\xe9\x32\x65\xbd\x76\xe8\x65\x5d\x0b\x0c\x2d\x9a\x62\xd9\xc7\xa1\x2b\x06\xd5\x95\x5d\xad\x96\xe4\x49\x54\xb2\xc2\xf0\x7f\x1f\x29\x3b\x69\x8a\x35\x17\xc7\xe4\x23\xdf\xe3\x23\xdd\xaa\xf2\x51\xd5\x1a\xac\x32\x4e\x08\x63\x5b\x1f\x10\xa6\x62\x52\x54\x16\x0b\x7a\x18\x5f\x08\x31\xa9\x1a\x55\x43\x51\x1b\x7c\x48\x77\xb2\xf4\x76\x81\xa5\x7b\x8c\x76\x61\x39\x51\x88\x99\x10\x8b\x05\x9c\xfd\x35\x08\xa5\xbf\xd7\x11\x54\xd0\x60\x1c\xc2\x5a\x35\x89\x5e\xf1\x41\x21\x04\xdd\x06\x1d\x35\x45\x95\x03\xbd\xc5\x42\xe5\x03\x28\x68\x55\x40\x53\xa6\x46\x05\xd0\x21\xf8\x20\x45\xe9\x5d\xcc\x4a\xb8\xed\x29\x21\x97\x17\x40\x3f\xee\x7a\x02\xef\x9f\xc3\x67\x0c\x1f\xc3\x47\xf0\x16\x8c\x47\x35\x0a\x3a\xbd\xfc\x0c\x86\xd9\x35\x51\x59\xab\xdc\x3d\x34\xc6\x69\xf0\x77\xbf\x75\x89\x02\x9f\x5a\x9d\x31\x11\x43\x2a\x11\x3a\x31\xa1\x22\x9f\x70\x85\x41\x2b\x0b\x8c\x27\x31\xdb\x37\x1a\x89\x3b\x45\xbc\x27\x48\x4e\xd2\x5f\xca\xe7\x2a\xf4\xb0\x09\x06\xc9\x47\x1d\x23\xfb\x59\x05\x6f\x33\x9e\x08\xa4\x98\xec\xba\xce\xf7\x5a\x1a\x2f\x7f\x70\x51\x10\x7d\xd6\xfb\x25\x39\x1a\x64\xed\x1f\x75\xdc\x96\xc2\x86\x3c\xcf\x2f\xb5\x59\x6b\x47\x2a\xea\x64\xc9\xc3\x28\x45\x95\x5c\x09\xd3\xb2\x31\x70\x48\xc0\x19\x57\x4f\x29\x1d\xe1\xe6\x96\x06\x32\xae\x9e\x65\x57\x3a\x91\x05\x7e\xd2\x55\x1e\xbd\x45\xe3\x1d\xe4\x7d\x92\xe7\x51\x0f\xbb\x8d\x70\x7c\x92\x83\xf2\x4a\x6f\xce\xe9\xb9\xd2\x38\xbd\x52\x56\xcf\x87\xe8\xa9\x77\x68\x5c\xd2\x4b\x97\xed\x9e\x8d\x55\x92\x60\xcb\x84\x6d\x42\xd6\x21\x77\x93\xed\xe7\xbf\xb1\x1d\xab\x27\xe7\xdb\x68\xe2\xb4\xe8\x3a\x90\xdc\x18\xfa\x1e\x6e\x06\x35\xf1\xb6\xa0\x02\x4a\x04\xe5\xc8\x39\x79\x9e\x05\xf5\x3d\x37\xd9\x87\x8f\x12\xa3\xec\x3a\xf9\x95\x76\xb7\xca\x53\xf6\xfd\x74\x3b\x70\x47\xdd\xe5\xea\x81\x2e\x98\x4b\xfa\xbe\x98\x43\xf1\x8e\x42\x97\xde\xd5\x63\xa4\x9f\x03\xb7\x24\x37\x54\x6a\x90\xba\x12\x64\x08\xc4\x32\x98\xc1\x1c\x82\x0d\x7a\x34\xed\x78\x90\xf1\x5d\x87\xc8\xa9\x9d\x84\x8f\xde\x37\x7b\xbc\xeb\x4c\xb5\x1e\x50\x4c\x52\xa9\x26\x92\x79\xc5\x75\xc8\x9f\xc1\x58\x6e\x1c\x5d\xbb\x55\x99\x85\x0f\xe8\x4f\x32\x28\x89\x2c\x6f\xe8\x9a\xd7\xb1\x3d\xd4\x7c\xa7\x4c\x25\x26\xa6\xe2\x93\x79\xa6\xce\xb8\xbc\xe9\x9b\xa3\xe3\xdb\xd9\x87\x9c\x7d\x73\x02\xce\x34\x7c\xc2\x93\xa0\x31\x05\x07\x2f\xbe\x0f\x31\xe9\x07\x12\x72\x67\xb3\x95\x93\x5b\x1f\x3e\x0f\xc7\xc5\xf4\xd5\xcb\xf3\x96\x45\x57\x2f\x57\x4a\xb3\x1c\xc4\xdd\x20\x07\xf1\xa7\xa3\x91\x87\x0b\x19\xeb\x67\xff\x73\x2f\x2f\x06\xe2\xd7\x76\xfb\x0b\x78\xa0\xbd\xfd\xee\x5b\x2e\x5e\xe9\xd4\x8b\x7f\x01\x00\x00\xff\xff\x1a\xef\x5f\x99\xac\x04\x00\x00")

func resource_tmpl_tcnksm_mflag_cli_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_tcnksm_mflag_cli_go_tmpl,
		"resource/tmpl/tcnksm_mflag/cli.go.tmpl",
	)
}

func resource_tmpl_tcnksm_mflag_cli_go_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_tcnksm_mflag_cli_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/tcnksm_mflag/cli.go.tmpl", size: 1196, mode: os.FileMode(420), modTime: time.Unix(1430833524, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _resource_tmpl_tcnksm_mflag_main_go_tmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\x50\xca\x2f\x56\xe2\xe2\x4a\x2b\xcd\x4b\x06\x8b\x6b\x68\x2a\x54\x73\x71\x26\xe7\x64\x2a\x58\xd9\x2a\xa8\x39\xfb\x78\x56\xe7\x97\x96\x04\x97\x14\xa5\x26\xe6\x5a\x29\xe4\x17\xeb\x05\x97\xa4\x00\x05\x74\x14\x52\x8b\x8a\x50\x45\x81\x02\xb5\x5c\x9c\x40\xb6\x6b\x45\x66\x89\x06\xd0\x00\xbd\xa0\xd2\x3c\x0d\x20\xdf\xb1\x28\xbd\x58\x53\x93\xab\x96\x0b\x10\x00\x00\xff\xff\xfc\x39\x7e\x56\x7f\x00\x00\x00")

func resource_tmpl_tcnksm_mflag_main_go_tmpl_bytes() ([]byte, error) {
	return bindata_read(
		_resource_tmpl_tcnksm_mflag_main_go_tmpl,
		"resource/tmpl/tcnksm_mflag/main.go.tmpl",
	)
}

func resource_tmpl_tcnksm_mflag_main_go_tmpl() (*asset, error) {
	bytes, err := resource_tmpl_tcnksm_mflag_main_go_tmpl_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "resource/tmpl/tcnksm_mflag/main.go.tmpl", size: 127, mode: os.FileMode(420), modTime: time.Unix(1430469412, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resource/tmpl/common/CHANGELOG.md.tmpl": resource_tmpl_common_changelog_md_tmpl,
	"resource/tmpl/common/README.md.tmpl": resource_tmpl_common_readme_md_tmpl,
	"resource/tmpl/common/version.go.tmpl": resource_tmpl_common_version_go_tmpl,
	"resource/tmpl/flag/cli.go.tmpl": resource_tmpl_flag_cli_go_tmpl,
	"resource/tmpl/flag/main.go.tmpl": resource_tmpl_flag_main_go_tmpl,
	"resource/tmpl/tcnksm_mflag/cli.go.tmpl": resource_tmpl_tcnksm_mflag_cli_go_tmpl,
	"resource/tmpl/tcnksm_mflag/main.go.tmpl": resource_tmpl_tcnksm_mflag_main_go_tmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resource": &_bintree_t{nil, map[string]*_bintree_t{
		"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
			"common": &_bintree_t{nil, map[string]*_bintree_t{
				"CHANGELOG.md.tmpl": &_bintree_t{resource_tmpl_common_changelog_md_tmpl, map[string]*_bintree_t{
				}},
				"README.md.tmpl": &_bintree_t{resource_tmpl_common_readme_md_tmpl, map[string]*_bintree_t{
				}},
				"version.go.tmpl": &_bintree_t{resource_tmpl_common_version_go_tmpl, map[string]*_bintree_t{
				}},
			}},
			"flag": &_bintree_t{nil, map[string]*_bintree_t{
				"cli.go.tmpl": &_bintree_t{resource_tmpl_flag_cli_go_tmpl, map[string]*_bintree_t{
				}},
				"main.go.tmpl": &_bintree_t{resource_tmpl_flag_main_go_tmpl, map[string]*_bintree_t{
				}},
			}},
			"tcnksm_mflag": &_bintree_t{nil, map[string]*_bintree_t{
				"cli.go.tmpl": &_bintree_t{resource_tmpl_tcnksm_mflag_cli_go_tmpl, map[string]*_bintree_t{
				}},
				"main.go.tmpl": &_bintree_t{resource_tmpl_tcnksm_mflag_main_go_tmpl, map[string]*_bintree_t{
				}},
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

